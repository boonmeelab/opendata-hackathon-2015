doctype html
html
  head
    block head
      title The 7 Dangerous New Year's Holidays in Thailand
      meta(name='viewport', content='width=device-width, initial-scale=1')
      link(rel='stylesheet', href='/public/dep/bootstrap/dist/css/bootstrap.min.css')
      link(rel='stylesheet', href='/public/dep/jquery-ui/themes/excite-bike/jquery-ui.min.css')
      link(rel='stylesheet', href='/public/css/main.css')
      script(src='/public/dep/jquery/dist/jquery.min.js')
      script(src='/public/dep/jquery-ui/jquery-ui.min.js')
      script(src='/public/dep/d3/d3.js')
      script(src='/public/dep/d3-tip/index.js')
      script(src='/public/js/main-a.js')

  body
    block body

      block content
        .container
          .row
            .col-xs-12
              h2.site-title
                a(href='/') The 7 Dangerous New Year's Holidays in Thailand
              .subtitle Data visualization of casualties due to lead accidents in Thailand during New Year Holidays in 2008 - 2015

          .row
            .col-xs-12.col-sm-7.col-md-6.col-lg-5
              #vis

            .col-xs-12.col-sm-5.col-md-6.col-lg-6
              #side-panel
                h4 Accidents during New Year Holidays
                  select#select-year(onchange='location.href="/?year="+this.value;')
                    for y in [2008,2009,2010,2011,2012,2013,2014,2015]
                      option(value=y, selected=(y===+select_year))= y

                #timeline.timeline
                  #slider
                  #slider_caption

                hr

                h3 Result

                #total-casualty.number-display
                  .count 0
                  .text accidents

                .row
                  .col-xs-6
                    #injured-casualty.number-display
                      .count 0
                      .text injuries
                  .col-xs-6
                    #died-casualty.number-display
                      .count 0
                      .text casualties

                #filter-panel(style='display: none;')

                  hr

                  h3 Filter

                  .row
                    .col-xs-4
                      #sex-filter.filter-display
                        label Sex
                        ul.filter-options
                          li
                            a(href='#', data-filter='sex', data-value='2') male
                          li
                            a(href='#', data-filter='sex', data-value='1') female

                    .col-xs-8
                      #age-filter.filter-display
                        label Age
                        ul.filter-options
                          li
                            a(href='#', data-filter='age', data-value='1') 18 and lower
                          li
                            a(href='#', data-filter='age', data-value='2') 19-35
                          li
                            a(href='#', data-filter='age', data-value='3') 36-55
                          li
                            a(href='#', data-filter='age', data-value='4') 56 up

                  .row
                    .col-xs-4
                      #alcohol-filter.filter-display
                        label Alcohol
                        ul.filter-options
                          li
                            a(href='#', data-filter='alcohol', data-value='2') yes
                          li
                            a(href='#', data-filter='alcohol', data-value='1') no

                    .col-xs-8
                      #sefety-filter.filter-display
                        label Safety (Helmet or Seat Belt)
                        ul.filter-options
                          li
                            a(href='#', data-filter='safety', data-value='2') yes
                          li
                            a(href='#', data-filter='safety', data-value='1') no

                  .row
                    .col-xs-12
                      #vehicle-filter.filter-display
                        label Vehicle
                        ul.filter-options
                          li
                            a(href='#', data-filter='vehicle', data-value='2') motocycle
                          li
                            a(href='#', data-filter='vehicle', data-value='3') bicycle
                          li
                            a(href='#', data-filter='vehicle', data-value='4') car
                          li
                            a(href='#', data-filter='vehicle', data-value='5') pickup &amp; truck
                          li
                            a(href='#', data-filter='vehicle', data-value='1') others

                  .row
                    .col-xs-12
                      #hit-filter.filter-display
                        label Hit With
                        ul.filter-options
                          li
                            a(href='#', data-filter='hitBy', data-value='2') motocycle
                          li
                            a(href='#', data-filter='hitBy', data-value='3') bicycle
                          li
                            a(href='#', data-filter='hitBy', data-value='4') car
                          li
                            a(href='#', data-filter='hitBy', data-value='5') pickup &amp; truck
                          li
                            a(href='#', data-filter='hitBy', data-value='1') others

          .row
            .col-xs-12.text-center
              #colophon
                .team Handcrafted by Mha Muang Team
                div &copy; 2015 Code available on &nbsp;
                  a(href='https://github.com/boonmeelab/opendata-hackathon-2015', target='_blank') github


script(type="text/javascript").
  var select_year = !{JSON.stringify(+select_year)};
  var default_global_filter = {
    year: {start: select_year, end: select_year},
    time: {start: [28, 0], end: [3, 23]},
    sex: [0,1,2],
    age: [0,1,2,3,4],
    alcohol: [0,1,2],
    safety: [0,1,2],
    vehicle: [0,1,2,3,4,5],
    hitBy: [0,1,2,3,4,5]
  };
  // clone default filter
  var global_filter = JSON.parse(JSON.stringify(default_global_filter));

  $(function() {

    $('.filter-options').on('click', 'a', function(e) {
      e.preventDefault();
      var $el = $(this);
      var $group = $el.closest('.filter-options');
      var isSelect = !$el.hasClass('selected');
      var filter = $el.data('filter');
      var value = $el.data('value');

      $group.find('a').removeClass('selected');
      if (isSelect) {
        $el.addClass('selected');
        // select one
        global_filter[filter] = [+value];
      } else {
        // deselect
        global_filter[filter] = default_global_filter[filter];
      }

      // next tick
      setTimeout(function() {
        updateFilter();
      }, 1)
    });
  });


  var w = 450;
  var h = 700;
  var projection = d3.geo.albers()
      .center([100.0, 13.5])
      .rotate([0, 24])
      .parallels([5, 21])
      .scale(1200 * 2)
      .translate([-100, 200]);

  var path = d3.geo.path().projection(projection);
  var t = projection.translate(); // the projection's default translation
  var s = projection.scale() // the projection's default scale

  var map = d3.select("#vis").append("svg:svg")
      .attr("width", w)
      .attr("height", h)
      // enable pan zoom
      //- .call(d3.behavior.zoom().on("zoom", redraw));

  var axes = map.append("svg:g").attr("id", "axes");

  var xAxis = axes.append("svg:line")
      .attr("x1", t[0])
      .attr("y1", 0)
      .attr("x2", t[0])
      .attr("y2", h);

  var yAxis = axes.append("svg:line")
      .attr("x1", 0)
      .attr("y1", t[1])
      .attr("x2", w)
      .attr("y2", t[1]);

  var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d) {
      return 'จังหวัด: '+d['จังหวัด']+' / เพศ: '+d['เพศ']+' / อายุ: '+d['อายุ']+' / การดื่มสุรา: '+d['การดื่มสุรา']+'<br>มาตรการ: '+d['มาตรการ']+' / รถผู้บาดเจ็บ: '+d['รถผู้บาดเจ็บ']+' / รถคู่กรณี: '+d['รถคู่กรณี'];
      //- return "<strong>Frequency:</strong> <span style='color:red'>" + d.frequency + "</span>";
    });
  map.call(tip);

  var thailand = map.append("svg:g").attr("id", "thailand");
  var legend = map.append("svg:g").attr("id", "legend");
  var injuryMap = map.append("svg:g").attr("id", "injury-map");
  var casualtyMap = map.append("svg:g").attr("id", "casualty-map");

  var dataset;
  var databucket = {};
  var province = {};
  var province_data = [];

  var number_format = d3.format('0,000');
  var injured_color = d3.rgb('#57c3d3');
  var dead_color = d3.rgb('#ff0000');

  d3.json("/public/data/thailand.json", function (json) {

    parse_province(json);

    // draw legend
    var legend_data = [
      { label: 'Injury', class: 'injured', r: 2 },
      { label: 'Casualty', class: 'died', r: 4 },
    ];
    legend.selectAll(".legend-icon")
        .data(legend_data)
      .enter().append('circle')
        .attr('class', function(d) { return 'legend-icon legend-icon-'+d.class; })
        .attr('cx', function(d, i) { return 250; })
        .attr('cy', function(d, i) { return 80 + i*20; })
        .attr('r', function(d, i) { return d.r; })
        .attr('color', function(d) { return d.color; });
    legend.selectAll(".legend-text")
        .data(legend_data)
      .enter().append('text')
        .attr('class', function(d) { return 'legend-text legend-text-'+d.class; })
        .attr('x', function(d, i) { return 260; })
        .attr('y', function(d, i) { return 80 + i*20; })
        //- .attr('r', 2)
        .text(function(d) { return d.label; });


    thailand.selectAll(".province")
        .data(json.features)
      .enter().append("svg:path")
        .attr("class", function(d) { return "province province-" + d.properties.CHA_NE+' province-'+d.properties.code; })
        .attr("d", path);

    thailand.selectAll(".province-center")
      .data(province_data)
      .enter().append("svg:circle")
        .attr('class', function(d) { return 'province-center'; })
        .attr('cx', function(d) {
          return projection(d.center)[0];
          })
        .attr('cy', function(d) { return projection(d.center)[1]; })
        .attr('r', function(d) { return 0; })
        ;

    //- startEmotionalScene();


    d3.csv("/public/data/newyear_casualties_"+select_year+".csv", function(error, data) {
    // d3.csv("/public/data/175_samples_all_newyear_casualties.csv", function(error, data) {
      if (error) { // when data is failed to load, do nothing.
        console.error(error);
      } else {
        // data is loaded successfully, we can start to visualize it.
        dataset = data;

        console.log('total data:', dataset.length);
        //- console.log('loading...');

        console.time('bucket');
        initTimeslotBucket();
        console.timeEnd('bucket');

        //- console.log('ready!');

        // init slider
        var $slider = $('#slider');
        var max_val = 7 * 24;
        $slider.slider({
          max: max_val,
          min: 0,
          value: 0,
          step: 1,
          slide: function(e, ui) {
            console.log(e);
            console.log(ui.value);
            var value = ui.value;
            var day = value / 24;
            var hour = value % 24;
            day = (day < 4)? day + 28: day - 3;
            global_filter['time'].end[0] = day;
            global_filter['time'].end[1] = hour;
            // next tick
            setTimeout(function() {
              updateFilter();
            }, 1);
          },
        })
        .each(function() {
          // Space out values
          var day_captions= ['Dec 28', 'Dec 29', 'Dec 30', 'Dec 31', 'Jan 1', 'Jan 2', 'Jan 3'];
          for (var i = 0, len = day_captions.length; i < len; ++i) {
            var el = $('<label>' + day_captions[i] + '</label>').css('left',(i/(len-1)*100)+'%');
            $( "#slider" ).append(el);
          }
        });

        //- $slider.slider('disable');
        startTimelineScene();

      }

    });

  });

  function updateFilter() {
    var filtered_data = filterUtil(dataset, global_filter);
    var data;
    var optimizeSpeed = true;
    var isDead;
    var ndead = 0;
    console.log(filtered_data.length);
    // clear old dots
    injuryMap.selectAll('*').remove();
    casualtyMap.selectAll('*').remove();

    for (var i=0; i<filtered_data.length; i++) {
      data = filtered_data[i];
      isDead = data['ผลการรักษา'].indexOf('ตาย') >= 0;
      if (isDead) ndead++;

      // avoid rendering some injury accidents
      // to reduce computation time
      if (optimizeSpeed && !isDead && i%5 != 0) {
        //- counter++;
      } else if (shoot(data, isDead, i, false)) {
        //- counter++;
      }
    }

    $('#total-casualty .count').text(number_format(filtered_data.length));
    $('#died-casualty .count').text(number_format(ndead));
    $('#injured-casualty .count').text(number_format(filtered_data.length - ndead));

  }

  function endScene() {
    $('#filter-panel').fadeIn();
    $('#slider').slider('enable');
  }

  function initTimeslotBucket() {
    databucket = prefilterUtil(dataset);
  }

  function startTimelineScene() {
    var speed = 200;
    var parallelism = 1;
    var counter = 0;

    var now = [ 28, 0 ];
    var selected_data;
    var selected_counter = 0;

    var $diedCount = $('#died-casualty .count');
    var $injuredCount = $('#injured-casualty .count');

    var $slider = $('#slider');

    var intervalId = setInterval(updateTimelineScene, speed);

    function getNext() {
      if (now[0] == 4) return null;
      if (selected_data && selected_counter < selected_data.length) {
        return selected_data[selected_counter++];
      }

      // update slider timeline
      $slider.slider('value', timeWrapper(now[0], now[1]));

      // filter data
      selected_data = databucket[now[0]] ? databucket[now[0]][now[1]] : [];
      selected_counter = 0;

      // move to next time slot
      now[1]++;
      if (now[1] === 24) {
        now[0]++;
        if (now[0] > 31) now[0] = 1;
        now[1] = 0;
      }

      return selected_data[selected_counter++];
    }

    function updateTimelineScene() {
      var data;
      var isDead;
      var optimizeSpeed = counter > 400;
      var $display;

      for (var i=0, data=getNext(); data && i<parallelism; data=getNext(), i++) {
        isDead = data['ผลการรักษา'].indexOf('ตาย') >= 0;

        // update display count
        $display = isDead ? $diedCount : $injuredCount;
        $display.text(number_format(+$display.text().replace(',', '')+1) );

        // avoid rendering some injury accidents
        // to reduce computation time
        if (optimizeSpeed && !isDead && i%5 != 0) {
          counter++;
        } else if (shoot(data, isDead, counter, true)) {
          counter++;
        }
      }

      // update display count
      $('#total-casualty .count').text(number_format(counter));

      // step 2
      if (speed != 0 && counter > 25) {
        speed = 50;
        parallelism = 1;
        clearInterval(intervalId);
        intervalId = setInterval(updateTimelineScene, speed);
      }

      // step 3
      if (speed != 0 && counter > 100) {
        speed = 50;
        parallelism = 3;
        clearInterval(intervalId);
        intervalId = setInterval(updateTimelineScene, speed);
      }

      // step 4
      if (speed != 0 && counter > 400) {
        speed = 0;
        parallelism = 200;
        clearInterval(intervalId);
        intervalId = setInterval(updateTimelineScene, speed);
      }

      // finish at date 4
      if (now[0] === 4) {
        clearInterval(intervalId);
        endScene();
      }
    }
  }

  function startEmotionalScene() {
    var speed = 200;
    var parallelism = 1;
    var target = 10000;
    var counter = 0;

    var intervalId = setInterval(updateEmotionalScene, speed);
    function updateEmotionalScene() {

      for (var i=0; i<parallelism; i++) {
        if (shoot(Math.floor(Math.random()*90)+10, Math.random() > 0.015 ? false : true, counter, true)) {
          counter++;
        }
      }

      $('#total-casualty .count').text(number_format(counter));

      // step 2
      if (speed != 0 && counter > 25) {
        speed = 50;
        parallelism = 1;
        clearInterval(intervalId);
        intervalId = setInterval(updateEmotionalScene, speed);
      }

      // step 3
      if (speed != 0 && counter > 100) {
        speed = 50;
        parallelism = 3;
        clearInterval(intervalId);
        intervalId = setInterval(updateEmotionalScene, speed);
      }

      // step 4
      if (speed != 0 && counter > 400) {
        speed = 0;
        parallelism = 33;
        clearInterval(intervalId);
        intervalId = setInterval(updateEmotionalScene, speed);
      }

      // finish
      if (counter > target) {
        clearInterval(intervalId);
        endScene();
      }
    }
  }

  function parse_province(data) {
    data.features.forEach(function(f) {
      var id = f.properties.code;
      f.id = id;
      f.region_type = 'province';
      f.center = get_avg_point(f);
      // add to list
      province_data.push(f);
      province[id] = f;
    });
  }
  function get_coords(province) {
    if (province.geometry.type === 'Polygon') return province.geometry.coordinates[0];
    if (province.geometry.type === 'MultiPolygon') return province.geometry.coordinates[0][0];
    return null;
  }
  function get_avg_point(province) {
    var xt=0, yt=0;
    var data = get_coords(province);
    //- if (geometry.type === 'Polygon') data = geometry.coordinates[0];
    //- if (geometry.type === 'MultiPolygon') data = geometry.coordinates[0][0];
    data.forEach(function(d) {
      xt += d[0];
      yt += d[1];
    });
    return [ xt/data.length, yt/data.length];
  }

  function redraw() {
    // d3.event.translate (an array) stores the current translation from the parent SVG element
    // t (an array) stores the projection's default translation
    // we add the x and y vales in each array to determine the projection's new translation
    var tx = t[0] * d3.event.scale + d3.event.translate[0];
    var ty = t[1] * d3.event.scale + d3.event.translate[1];
    projection.translate([tx, ty]);

    // now we determine the projection's new scale, but there's a problem:
    // the map doesn't 'zoom onto the mouse point'
    projection.scale(s * d3.event.scale);

    // redraw the map
    thailand.selectAll("path").attr("d", path);

    // redraw the x axis
    xAxis.attr("x1", tx).attr("x2", tx);

    // redraw the y axis
    yAxis.attr("y1", ty).attr("y2", ty);
  }

  function shoot(data, isDead, order, animate) {
    var province_id = data['รหัสจังหวัด'];
    var p = province[province_id];
    if (!p) return false;
    //- p = {
    //-   center: p.center
    //- };
    data.center = p.center;
    var p_data = [data];
    var dv = Math.log(order+1) * 2;

    // add accident point randomly
    var color = isDead ? dead_color.hsl().toString() : injured_color.hsl().toString();
    var parent = isDead ? casualtyMap : injuryMap;
    var circle = parent.selectAll(".accident-"+order)
      .data(p_data)
      .enter().append("svg:circle")
        .attr('class', function(d) {
          return 'accident accident-dead accident-'+order;
        })
        .attr('cx', function(d) {
          return projection(d.center)[0] + Math.random()*dv*2 - dv;
        })
        .attr('cy', function(d) {
          return projection(d.center)[1] + Math.random()*dv*2 - dv;
        })
        ;
    if (isDead) {
      // casualty dot
      circle
        .attr('fill', color)
        .on('mouseover', function(e) {
          d3.select(this)
            .transition()
            .attr('r', function(d) { return 10; });
          tip.show(e);
        })
        .on('mouseout', function(e) {
          d3.select(this)
            .transition()
            .attr('r', function(d) { return 2; });
          tip.hide(e);
        });
      if (animate) {
        circle
          .attr('r', function(d) { return 10; })
          .transition()
          .attr('r', function(d) { return 2; })
          ;
      } else {
        circle
          .attr('r', function(d) { return 2; })
          ;
      }
    } else {
      // injury dot
      circle
        .attr('fill', color);

      if (animate) {
        circle
          .attr('r', function(d) { return 3; })
          .transition()
          .attr('r', function(d) { return 1; });
      } else {
        circle
          .attr('r', function(d) { return 1; });
      }
    }
    return true;
  }

  /**
   * @param  {point} point Point to check
   * @param  {Array<point>} vs  Array of polygon coordinates
   * @return {boolean}     Is inside
   */
  function pointInPolygon(point, vs) {
    // ray-casting algorithm based on
    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
    var xi, xj, i, intersect,
        x = point[0],
        y = point[1],
        inside = false;
    for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
      xi = vs[i][0],
      yi = vs[i][1],
      xj = vs[j][0],
      yj = vs[j][1],
      intersect = ((yi > y) != (yj > y))
          && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
      if (intersect) inside = !inside;
    }
    return inside;
  }
