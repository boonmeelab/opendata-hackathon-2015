doctype html
html
  head
    block head
      title อุบัติเหตุปีใหม่
      meta(name='viewport', content='width=device-width, initial-scale=1')
      link(rel='stylesheet', href='/public/dep/bootstrap/dist/css/bootstrap.min.css')
      link(rel='stylesheet', href='/public/css/main.css')
      script(src='/public/dep/jquery/dist/jquery.min.js')
      script(src='/public/dep/d3/d3.js')

  body
    block body

      block content
        .container
          .row
            .col-xs-12
              h2 The 7 Dangerous New Year's Holidays in Thailand
              .subtitle Data visualization of casualties due to read accidents in Thailand during New Year Holidays in 2008 - 2015

          .row
            .col-xs-7.col-md-6.col-lg-5
              #vis

            .col-xs-5.col-md-6.col-lg-6
              #side-panel
                h4 Accidents during New Year Holidays
                  select#select-year
                    option(value='2008') 2008

                #timeline.timeline

                hr

                h3 Result

                #total-casualty.number-display
                  .count 25,690
                  .text casualties

                .row
                  .col-xs-6
                    #injured-casualty.number-display
                      .count 0
                      .text injured
                  .col-xs-6
                    #died-casualty.number-display
                      .count 0
                      .text died
                hr

                h3 Filter

                .row
                  .col-xs-4
                    #sex-filter.filter-display
                      label Sex
                      ul.filter-options
                        li
                          a(href='#', data-filter='sex', data-value='male') male
                        li
                          a(href='#', data-filter='sex', data-value='female') female

                  .col-xs-8
                    #age-filter.filter-display
                      label Age
                      ul.filter-options
                        li
                          a(href='#', data-filter='age', data-value='18-') 18 and lower
                        li
                          a(href='#', data-filter='age', data-value='19-35') 19-35
                        li
                          a(href='#', data-filter='age', data-value='36-55') 36-55
                        li
                          a(href='#', data-filter='age', data-value='56+') 56 up

                .row
                  .col-xs-4
                    #alcohol-filter.filter-display
                      label Alcohol
                      ul.filter-options
                        li
                          a(href='#', data-filter='alcohol', data-value='yes') yes
                        li
                          a(href='#', data-filter='alcohol', data-value='no') no

                  .col-xs-8
                    #sefety-filter.filter-display
                      label Safety (Helmet or Seat Belt)
                      ul.filter-options
                        li
                          a(href='#', data-filter='safety', data-value='yes') yes
                        li
                          a(href='#', data-filter='safety', data-value='no') no

                .row
                  .col-xs-12
                    #vehicle-filter.filter-display
                      label Vehicle
                      ul.filter-options
                        li
                          a(href='#', data-filter='vehicle', data-value='none') none
                        li
                          a(href='#', data-filter='vehicle', data-value='motorcycle') motocycle
                        li
                          a(href='#', data-filter='vehicle', data-value='bicycle') bicycle
                        li
                          a(href='#', data-filter='vehicle', data-value='car') car
                        li
                          a(href='#', data-filter='vehicle', data-value='pickup') pickup &amp; truck

                .row
                  .col-xs-12
                    #hit-filter.filter-display
                      label Hit With
                      ul.filter-options
                        li
                          a(href='#', data-filter='hit', data-value='none') none
                        li
                          a(href='#', data-filter='hit', data-value='motorcycle') motocycle
                        li
                          a(href='#', data-filter='hit', data-value='bicycle') bicycle
                        li
                          a(href='#', data-filter='hit', data-value='car') car
                        li
                          a(href='#', data-filter='hit', data-value='pickup') pickup &amp; truck



script(type="text/javascript").
  var w = 450;
  var h = 700;
  var projection = d3.geo.albers()
      .center([100.0, 13.5])
      .rotate([0, 24])
      .parallels([5, 21])
      .scale(1200 * 2)
      .translate([-100, 200]);

  var path = d3.geo.path().projection(projection);
  var t = projection.translate(); // the projection's default translation
  var s = projection.scale() // the projection's default scale

  var map = d3.select("#vis").append("svg:svg")
      .attr("width", w)
      .attr("height", h)
      // enable pan zoom
      //- .call(d3.behavior.zoom().on("zoom", redraw));

  var axes = map.append("svg:g").attr("id", "axes");

  var xAxis = axes.append("svg:line")
      .attr("x1", t[0])
      .attr("y1", 0)
      .attr("x2", t[0])
      .attr("y2", h);

  var yAxis = axes.append("svg:line")
      .attr("x1", 0)
      .attr("y1", t[1])
      .attr("x2", w)
      .attr("y2", t[1]);

  var thailand = map.append("svg:g").attr("id", "thailand");

  var province = {};
  var province_data = [];

  var number_format = d3.format('0,000');
  var injured_color = d3.rgb('#57c3d3');
  var dead_color = d3.rgb('#ff0000');

  d3.json("/public/data/thailand.json", function (json) {

    parse_province(json);

    thailand.selectAll(".province")
        .data(json.features)
      .enter().append("svg:path")
        .attr("class", function(d) { return "province province-" + d.properties.CHA_NE+' province-'+d.properties.code; })
        .attr("d", path);

    thailand.selectAll(".province-center")
      .data(province_data)
      .enter().append("svg:circle")
        .attr('class', function(d) { return 'province-center'; })
        .attr('cx', function(d) {
          return projection(d.center)[0];
          })
        .attr('cy', function(d) { return projection(d.center)[1]; })
        .attr('r', function(d) { return 0; })
        ;

    startEmotionalScene();

  });

  function startEmotionalScene() {
    var speed = 200;
    var parallelism = 1;
    var target = 10000;
    var counter = 0;

    var intervalId = setInterval(updateEmotionalScene, speed);
    function updateEmotionalScene() {

      for (var i=0; i<parallelism; i++) {
        if (shoot(Math.floor(Math.random()*90)+10, Math.random() > 0.015 ? false : true, counter)) {
          counter++;
        }
      }

      $('#total-casualty .count').text(number_format(counter));

      // step 2
      if (speed != 0 && counter > 25) {
        speed = 50;
        parallelism = 1;
        clearInterval(intervalId);
        intervalId = setInterval(updateEmotionalScene, speed);
      }

      // step 3
      if (speed != 0 && counter > 100) {
        speed = 50;
        parallelism = 3;
        clearInterval(intervalId);
        intervalId = setInterval(updateEmotionalScene, speed);
      }

      // step 4
      if (speed != 0 && counter > 400) {
        speed = 0;
        parallelism = 33;
        clearInterval(intervalId);
        intervalId = setInterval(updateEmotionalScene, speed);
      }

      // finish
      if (counter > target) {
        clearInterval(intervalId);
      }
    }
  }

  function parse_province(data) {
    data.features.forEach(function(f) {
      var id = f.properties.code;
      f.id = id;
      f.region_type = 'province';
      f.center = get_avg_point(f.geometry);
      // add to list
      province_data.push(f);
      province[id] = f;
    });
  }

  function get_avg_point(geometry) {
    var xt=0, yt=0;
    var data;
    if (geometry.type === 'Polygon') data = geometry.coordinates[0];
    if (geometry.type === 'MultiPolygon') data = geometry.coordinates[0][0];
    data.forEach(function(d) {
      xt += d[0];
      yt += d[1];
    });
    return [ xt/data.length, yt/data.length];
  }

  function redraw() {
    // d3.event.translate (an array) stores the current translation from the parent SVG element
    // t (an array) stores the projection's default translation
    // we add the x and y vales in each array to determine the projection's new translation
    var tx = t[0] * d3.event.scale + d3.event.translate[0];
    var ty = t[1] * d3.event.scale + d3.event.translate[1];
    projection.translate([tx, ty]);

    // now we determine the projection's new scale, but there's a problem:
    // the map doesn't 'zoom onto the mouse point'
    projection.scale(s * d3.event.scale);

    // redraw the map
    thailand.selectAll("path").attr("d", path);

    // redraw the x axis
    xAxis.attr("x1", tx).attr("x2", tx);

    // redraw the y axis
    yAxis.attr("y1", ty).attr("y2", ty);
  }

  function shoot(province_id, isDead, order) {
    var p = province[province_id];
    if (!p) return false;
    var p_data = [p];
    var dv = Math.log(order+1) * 2;
    var $display = isDead ? $('#died-casualty .count') : $('#injured-casualty .count');

    // update displaycount
    $display.text(number_format(+$display.text().replace(',', '')+1) );

    // add accident point randomly
    var color = isDead ? dead_color.hsl().toString() : injured_color.hsl().toString();
    var circle = thailand.selectAll(".accident-"+order)
      .data(p_data)
      //- .data(province_data)
      .enter().append("svg:circle")
        .attr('class', function(d) { return 'accident accident-dead accident-'+order; })
        .attr('cx', function(d) {
          return projection(d.center)[0] + Math.random()*dv*2 - dv;
        })
        .attr('cy', function(d) {
          return projection(d.center)[1] + Math.random()*dv*2 - dv;
        })
        ;
    if (isDead) {
      circle
        .attr('fill', color)
        .attr('r', function(d) { return 10; })
        .transition()
        //- .attr('fill', color)
        .attr('r', function(d) { return 2; })
          ;
    } else {
      circle
        .attr('fill', color)
        .attr('r', function(d) { return 1; });
    }
    return true;
  }

