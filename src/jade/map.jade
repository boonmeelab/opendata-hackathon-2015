doctype html
html
  head
    block head
      title อุบัติเหตุปีใหม่
      meta(name='viewport', content='width=device-width, initial-scale=1')
      link(rel='stylesheet', href='/public/dep/bootstrap/dist/css/bootstrap.min.css')
      link(rel='stylesheet', href='/public/css/main.css')
      script(src='/public/dep/jquery/dist/jquery.min.js')
      script(src='/public/dep/d3/d3.js')

  body
    block body

      block content
        .container
          .row
            .col-xs-12
              h1 Thailand map
              #vis




script(type="text/javascript").
  var w = 450;
  var h = 700;
  var projection = d3.geo.albers()
      .center([100.0, 13.5])
      .rotate([0, 24])
      .parallels([5, 21])
      .scale(1200 * 2)
      .translate([-100, 200]);

  var path = d3.geo.path().projection(projection);
  var t = projection.translate(); // the projection's default translation
  var s = projection.scale() // the projection's default scale

  var map = d3.select("#vis").append("svg:svg")
      .attr("width", w)
      .attr("height", h)
      // enable pan zoom
      //- .call(d3.behavior.zoom().on("zoom", redraw));

  var axes = map.append("svg:g").attr("id", "axes");

  var xAxis = axes.append("svg:line")
      .attr("x1", t[0])
      .attr("y1", 0)
      .attr("x2", t[0])
      .attr("y2", h);

  var yAxis = axes.append("svg:line")
      .attr("x1", 0)
      .attr("y1", t[1])
      .attr("x2", w)
      .attr("y2", t[1]);

  var thailand = map.append("svg:g").attr("id", "thailand");

  var province = {};
  var province_data = [];

  d3.json("/public/data/thailand.json", function (json) {

    parse_province(json);

    thailand.selectAll("path")
        .data(json.features)
      .enter().append("svg:path")
        .attr("class", function(d) { return "province province-" + d.properties.CHA_NE+' province-'+d.properties.code; })
        .attr("d", path);

    thailand.selectAll("circle")
      .data(province_data)
      .enter().append("svg:circle")
        .attr('class', function(d) { return 'province-center'; })
        .attr('cx', function(d) {
          return projection(d.center)[0];
          })
        .attr('cy', function(d) { return projection(d.center)[1]; })
        .attr('r', function(d) { return 2; })
        ;
  });

  function parse_province(data) {
    data.features.forEach(function(f) {
      var id = f.properties.code;
      f.id = id;
      f.region_type = 'province';
      f.center = get_avg_point(f.geometry);
      // add to list
      province_data.push(f);
      province[id] = f;
    });
  }

  function get_avg_point(geometry) {
    var xt=0, yt=0;
    var data;
    if (geometry.type === 'Polygon') data = geometry.coordinates[0];
    if (geometry.type === 'MultiPolygon') data = geometry.coordinates[0][0];
    data.forEach(function(d) {
      xt += d[0];
      yt += d[1];
    });
    return [ xt/data.length, yt/data.length];
  }

  function redraw() {
    // d3.event.translate (an array) stores the current translation from the parent SVG element
    // t (an array) stores the projection's default translation
    // we add the x and y vales in each array to determine the projection's new translation
    var tx = t[0] * d3.event.scale + d3.event.translate[0];
    var ty = t[1] * d3.event.scale + d3.event.translate[1];
    projection.translate([tx, ty]);

    // now we determine the projection's new scale, but there's a problem:
    // the map doesn't 'zoom onto the mouse point'
    projection.scale(s * d3.event.scale);

    // redraw the map
    thailand.selectAll("path").attr("d", path);

    // redraw the x axis
    xAxis.attr("x1", tx).attr("x2", tx);

    // redraw the y axis
    yAxis.attr("y1", ty).attr("y2", ty);
  }


